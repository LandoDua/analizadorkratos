


class analizador_lex():
    def __init__(self, palabra = '') -> None:
        self.matrizLexico = [
        [1  , 2  , 3  , 506, 506, 1  , 2  , 106, 105, 107, 128, 108, 15 , 17 , 19 , 129, 130, 121, 122, 119, 120, 10 , 11 , 9  , 14 , 13 , 12 , 124, 123, 0  , 0  , 0  , 506, 0  ],
        [1  , 2  , 2  , 2  , 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100],
        [2  , 2  , 2  , 2  , 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101],
        [102, 102, 3  , 102, 4  , 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102],
        [500, 500, 5  , 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500],
        [103, 103, 5  , 103, 103, 6  , 6  , 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103],
        [501, 501, 8  , 501, 501, 501, 501, 7  , 7  , 501, 501, 501, 501, 501, 501, 501, 501, 501, 501, 501, 501, 501, 501, 501, 501, 501, 501, 501, 501, 501, 501, 501, 501, 501],
        [502, 502, 8  , 502, 502, 502, 502, 502, 502, 502, 502, 502, 502, 502, 502, 502, 502, 502, 502, 502, 502, 502, 502, 502, 502, 502, 502, 502, 502, 502, 502, 502, 502, 502],
        [104, 104, 8  , 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104],
        [109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 110, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109],
        [111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 112, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111],
        [113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 114, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113],
        [116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 115, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116],
        [503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 117, 503, 503, 503, 503, 503, 503, 503, 503],
        [504, 504, 504, 504, 504, 504, 504, 504, 504, 504, 504, 504, 504, 504, 504, 504, 504, 504, 504, 504, 504, 504, 504, 504, 118, 504, 504, 504, 504, 504, 504, 504, 504, 504],
        [16 , 16 , 16 , 16 , 16 , 16 , 16 , 16 , 16 , 16 , 16 , 16 , 505, 16 , 16 , 16 , 16 , 16 , 16 , 16 , 16 , 16 , 16 , 16 , 16 , 16 , 16 , 16 , 16 , 16 , 16 , 16 , 16 , 16 ],
        [507, 507, 507, 507, 507, 507, 507, 507, 507, 507, 507, 507, 125, 507, 507, 507, 507, 507, 507, 507, 507, 507, 507, 507, 507, 507, 507, 507, 507, 507, 507, 507, 507, 507],
        [17 , 17 , 17 , 17 , 17 , 17 , 17 , 17 , 17 , 17 , 17 , 17 , 17 , 18 , 17 , 17 , 17 , 17 , 17 , 17 , 17 , 17 , 17 , 17 , 17 , 17 , 17 , 17 , 17 , 508, 17 , 17 , 17 , 17 ],
        [126, 126, 126, 126, 126, 126, 126, 126, 126, 126, 126, 126, 126, 17 , 126, 126, 126, 126, 126, 126, 126, 126, 126, 126, 126, 126, 126, 126, 126, 126, 126, 126, 126, 126],
        [19 , 19 , 19 , 19 , 19 , 19 , 19 , 19 , 19 , 19 , 19 , 19 , 19 , 19 , 19 , 19 , 19 , 19 , 19 , 19 , 19 , 19 , 19 , 19 , 19 , 19 , 19 , 19 , 19 , 127 , 19, 19 , 19 , 19 ]
        ]

        self.caracteres = {
            '_':3,
            '.':4,
            'e':5,
            'E':6,
            '-':7,
            '+':8,
            '*':9,
            '%':10,
            '/':11,
            "'":12,
            '"':13,
            '#':14,
            '}':15,
            '{':16,
            '[':17,
            ']':18,
            '(':19,
            ')':20,
            '<':21,
            '>':22,
            '=':23,
            '|':24,
            '&':25,
            '!':26,
            ',':27,
            ',':28,
            '\n':29,
            '\t':30,
            '\b':31,
            ' ':33,
        }

        self.reservadas = {
            "lib":  131,
            "library":  132,
            "class":    133,
            "int":  134,
            "float":    135,
            "char": 136,
            "string":   137,
            "bool": 138,
            "if":   139,
            "else": 140,
            "elseif":   141,
            "do":   142,
            "dowhile":  143,
            "enddo":    144,
            "while":    145,
            "input":    146,
            "output":   147,
            "def":  148,
            "as":   149,
            "cons": 150,
            "array":    151,
            "endclass": 152,
            "private":  153,
            "public":   154,
            "protected":155,
            "list": 156,
            "main": 157,
            "end":  158,
            "endif":159,
            "endwhile": 160,
        }

        self.lexema = ' '
        self.lexema_simple = ' '
        self.caracter = ''
        self.posicion = 0
        self.edo = 0
        self.palabra = palabra
        self.col = 0

    def relaciona(self, c):
        if c>='a' and c<='z':
            if(self.lexema[0] >= '0' and self.lexema[0] <= '9' and c == 'e'):
                return 5
            return 0
        
        if c>='A' and c<='Z':
            if(self.lexema[0] >= '0' and self.lexema[0] <= '9' and c == 'e'):
                return 5
            return 0
        
        if(c>='0' and c<='9'):
            return 2
        
        return self.caracteres.get(c,32)
        
    def ajustar_puntero(self):
        
        self.lexema_simple = self.lexema_simple[:-1]
        self.lexema_simple = self.lexema_simple.strip()

        self.lexema = self.lexema[:-1]

        self.posicion -= 1


    def get_token(self):
        self.lexema = ' '
        self.lexema_simple = ' '
        self.edo = 0
        
        while self.posicion < len(self.palabra):
            self.caracter = self.palabra[self.posicion]
            self.col = self.relaciona(self.caracter)
            #print('EDO = ', self.edo)
            self.edo = self.matrizLexico[self.edo][self.col]

            if(self.caracter != '\n' and self.caracter != ' '):
                self.lexema += self.caracter
            
            self.lexema += self.caracter

            if (self.edo == 101): # si es un identificador
                self.ajustar_puntero()

            if self.edo == 100: # evaluar reservadas() # para identificadores que parecen reservadas
                self.ajustar_puntero()
                self.edo = self.reservadas.get(self.lexema_simple, 101)
            
            if self.edo >= 50:

                if self.edo >= 500: # ERROR
                    pass

                if self.edo >= 100 and self.edo < 500: # TOKEN VALIDO
                    pass
                
                #reiniciamos variables
                self.lexema = ''
                self.lexema_simple = ''
                self.posicion += 1
                return self.edo
            
            self.posicion += 1

        return 100 # $ # fin de la cadena

if(__name__ == '__main__'):

    cadena = 'myvar = 5 + 4.1 if'

    lex = analizador_lex(cadena)
    
    token = lex.get_token()

    while token != 100:
        print(token)
        token = lex.get_token()

    pass



